<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.EmployeeDao">
    <select id="getEmpByDepId" resultType="pojo.Employee">
        SELECT * FROM t_employee WHERE departmentid=#{departmentid}
    </select>
    <!--1.动态sql if where -->
    <!--List<Employee>  getEmpByIdDynamic(Employee employee);-->
    <select id="getEmpByIdDynamic" resultMap="MyEmp">
        select * from t_employee
          <trim prefixOverrides="and" suffixOverrides="and">
          <!-- 后面多出的and或者or where标签不能解决
           prefix="":前缀： prefix给拼串后的整个字符串加一个前缀 。
           prefixOverrides="":前缀覆盖： 去掉整个字符串前面多余的字符
           suffix="":后缀     suffix给拼串后的整个字符串加一个后缀
           suffixOverrides=""后缀覆盖：去掉整个字符串后面多余的字符
           -->
              <where>
                  <if test="id!=null">
                      and id > #{id}
                  </if>
                  <!-- bind：可以将OGNL表达式的值绑定到一个变量中，
                  方便后来引用这个变量的值 -->
                  <bind name="lastName" value="'%'+lastName+'%'"/>
                  <if test="lastName!=null and lastName!=&quot;&quot;">
                      and lastname like #{lastName} and
                  </if>
              </where>
          </trim>
    </select>
    <resultMap type="pojo.Employee" id="MyEmp">
        <id column="id" property="id"/>
        <result column="lastName" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <result column="birth" property="birth"/>
        <result column="login_account" property="loginAccount"/>
        <association property="department"
                     javaType="pojo.Department"
                     select="dao.DepartmentDao.getDepById"
                     column="departmentid"
                     fetchType="lazy">
        </association>
    </resultMap>

    <!--2. foreach 标签 解决 id = [1,2,3]形式的查询 -->
    <!--List<Employee> getEmpByIdsDynamic(@Param("ids") Integer[] ids);-->
    <select id="getEmpByIdsDynamic" resultMap="MyEmp">
        select * from t_employee
        where id in
        <!--(1,3,4)-->

#         - collection：指定要遍历的集合：
#         - list类型的参数会特殊处理封装在map中，map的key就叫list
#         - item：将当前遍历出的元素赋值给指定的变量
#         - separator:每个元素之间的分隔符
#         - open：遍历出所有结果拼接一个开始的字符
#         - close:遍历出所有结果拼接一个结束的字符
#         - index:索引。遍历list的时候是index就是索引，item就是当前值
#         - 遍历map的时候index表示的就是map的key，item就是map的值
#         - `#{变量名}`就能取出变量的值也就是当前遍历出的元素
      <foreach collection="ids" item="item" separator="," open="(" close=")">
          #{item}
      </foreach>
    </select>

    <!--3.set-与if结合的动态更新-->
    <!--void updateEmpDynamic(Employee employee);-->
    <update id="updateEmpDynamic">
        update t_employee
        <!--使用set标签 防止为空时的 ， 拼串错误-->
        <set>
            <if test="lastName!=null">
                lastName=#{lastName},
            </if>
            <if test="email!=null">
                email=#{email},
            </if>
            <if test="gender!=null">
                gender=#{gender}
            </if>
        </set>
        where id = #{id}
    </update>


</mapper>

